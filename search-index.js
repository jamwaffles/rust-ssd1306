var searchIndex = {};
searchIndex["embedded_hal"] = {"doc":"A Hardware Abstraction Layer (HAL) for embedded systems","items":[[0,"blocking","embedded_hal","Blocking API",null,null],[0,"delay","embedded_hal::blocking","Delays",null,null],[8,"DelayMs","embedded_hal::blocking::delay","Millisecond delay",null,null],[10,"delay_ms","","Pauses execution for `ms` milliseconds",0,{"inputs":[{"name":"self"},{"name":"uxx"}],"output":null}],[8,"DelayUs","","Microsecond delay",null,null],[10,"delay_us","","Pauses execution for `us` microseconds",1,{"inputs":[{"name":"self"},{"name":"uxx"}],"output":null}],[0,"i2c","embedded_hal::blocking","Blocking I2C API",null,null],[8,"Read","embedded_hal::blocking::i2c","Blocking read",null,null],[16,"Error","","Error type",2,null],[10,"read","","Reads enough bytes from slave with `address` to fill `buffer`",2,null],[8,"Write","","Blocking write",null,null],[16,"Error","","Error type",3,null],[10,"write","","Sends bytes to slave with address `addr`",3,null],[8,"WriteRead","","Blocking write + read",null,null],[16,"Error","","Error type",4,null],[10,"write_read","","Sends bytes to slave with address `addr` and then reads enough bytes to fill `buffer` in a single transaction",4,null],[0,"serial","embedded_hal::blocking","Blocking serial API",null,null],[0,"write","embedded_hal::blocking::serial","Blocking serial write",null,null],[8,"Default","embedded_hal::blocking::serial::write","Marker trait to opt into default blocking write implementation",null,null],[8,"Write","embedded_hal::blocking::serial","Write half of a serial interface (blocking variant)",null,null],[16,"Error","","The type of error that can occur when writing",5,null],[10,"bwrite_all","","Writes a slice, blocking until everything has been written",5,null],[10,"bflush","","Block until the serial interface has sent all buffered words",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"spi","embedded_hal::blocking","Blocking SPI API",null,null],[0,"transfer","embedded_hal::blocking::spi","Blocking transfer",null,null],[8,"Default","embedded_hal::blocking::spi::transfer","Default implementation of `blocking::spi::Transfer<W>` for implementers of `spi::FullDuplex<W>`",null,null],[0,"write","embedded_hal::blocking::spi","Blocking write",null,null],[8,"Default","embedded_hal::blocking::spi::write","Default implementation of `blocking::spi::Write<W>` for implementers of `spi::FullDuplex<W>`",null,null],[8,"Transfer","embedded_hal::blocking::spi","Blocking transfer",null,null],[16,"Error","","Error type",6,null],[10,"transfer","","Sends `words` to the slave. Returns the `words` received from the slave",6,null],[8,"Write","","Blocking write",null,null],[16,"Error","","Error type",7,null],[10,"write","","Sends `words` to the slave, ignoring all the incoming words",7,null],[0,"digital","embedded_hal","Digital I/O",null,null],[8,"OutputPin","embedded_hal::digital","Single digital output pin",null,null],[10,"is_high","","Is the output pin high?",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_low","","Is the output pin low?",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_low","","Sets the pin low",8,{"inputs":[{"name":"self"}],"output":null}],[10,"set_high","","Sets the pin high",8,{"inputs":[{"name":"self"}],"output":null}],[0,"prelude","embedded_hal","The prelude is a collection of all the traits in this crate",null,null],[0,"serial","","Serial interface",null,null],[8,"Read","embedded_hal::serial","Read half of a serial interface",null,null],[16,"Error","","Read error",9,null],[10,"read","","Reads a single word from the serial interface",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Write","","Write half of a serial interface",null,null],[16,"Error","","Write error",10,null],[10,"write","","Writes a single word to the serial interface",10,{"inputs":[{"name":"self"},{"name":"word"}],"output":{"name":"result"}}],[10,"flush","","Ensures that none of the previously written words are still buffered",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"spi","embedded_hal","Serial Peripheral Interface",null,null],[3,"Mode","embedded_hal::spi","SPI mode",null,null],[12,"polarity","","Clock polarity",11,null],[12,"phase","","Clock phase",11,null],[4,"Polarity","","Clock polarity",null,null],[13,"IdleLow","","Clock signal low when idle",12,null],[13,"IdleHigh","","Clock signal high when idle",12,null],[4,"Phase","","Clock phase",null,null],[13,"CaptureOnFirstTransition","","Data in \"captured\" on the first clock transition",13,null],[13,"CaptureOnSecondTransition","","Data in \"captured\" on the second clock transition",13,null],[8,"FullDuplex","","Full duplex (master mode)",null,null],[16,"Error","","An enumeration of SPI errors",14,null],[10,"read","","Reads the word stored in the shift register",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"send","","Sends a word to the slave",14,{"inputs":[{"name":"self"},{"name":"word"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"polarity"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"polarity"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"phase"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"phase"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"mode"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[0,"timer","embedded_hal","Timers",null,null],[8,"CountDown","embedded_hal::timer","A count down timer",null,null],[16,"Time","","The unit of time used by this timer",15,null],[10,"start","","Starts a new count down",15,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[10,"wait","","Non-blockingly \"waits\" until the count down finishes",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Periodic","","Marker trait that indicates that a timer is periodic",null,null],[8,"PwmPin","embedded_hal","A single PWM channel / pin",null,null],[16,"Duty","","Type for the `duty` methods",16,null],[10,"disable","","Disables a PWM `channel`",16,{"inputs":[{"name":"self"}],"output":null}],[10,"enable","","Enables a PWM `channel`",16,{"inputs":[{"name":"self"}],"output":null}],[10,"get_duty","","Returns the current duty cycle",16,null],[10,"get_max_duty","","Returns the maximum duty cycle value",16,null],[10,"set_duty","","Sets a new duty cycle",16,null]],"paths":[[8,"DelayMs"],[8,"DelayUs"],[8,"Read"],[8,"Write"],[8,"WriteRead"],[8,"Write"],[8,"Transfer"],[8,"Write"],[8,"OutputPin"],[8,"Read"],[8,"Write"],[3,"Mode"],[4,"Polarity"],[4,"Phase"],[8,"FullDuplex"],[8,"CountDown"],[8,"PwmPin"]]};
searchIndex["nb"] = {"doc":"Minimal and reusable non-blocking I/O layer","items":[[4,"Error","nb","A non-blocking error",null,null],[13,"Other","","A different kind of error",0,null],[13,"WouldBlock","","This operation requires blocking behavior to complete",0,null],[6,"Result","","A non-blocking result",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"block","","Turns the non-blocking expression `$e` into a blocking operation.",null,null]],"paths":[[4,"Error"]]};
searchIndex["ssd1306"] = {"doc":"Device-agnostic driver for SSD1306","items":[[3,"Ssd1306","ssd1306","Ssd1306",null,null],[0,"prelude","","SSD1306 Prelude Traits for",null,null],[8,"Write","ssd1306::prelude","Trait for writing data to SSD1306",null,null],[16,"Error","","Error type",0,null],[10,"write_cmd","","Write a command to SSD1306",0,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"}],"output":{"name":"result"}}],[10,"write_data","","Write data to SSD1306",0,null],[0,"cmd","ssd1306","Commands",null,null],[4,"Command","ssd1306::cmd","Commands",null,null],[13,"Contrast","","Set contrast. Higher number is higher contrast. Default = 0x7F",1,null],[13,"AllOn","","Turn entire display on. If set, all pixels will be set to on, if not, the value in memory will be used.",1,null],[13,"Invert","","Invert display.",1,null],[13,"DisplayOn","","Turn display on or off.",1,null],[13,"HScrollSetup","","Set up horizontal scrolling. Values are scroll direction, start page, end page, and number of frames per step.",1,null],[13,"VHScrollSetup","","Set up horizontal + vertical scrolling. Values are scroll direction, start page, end page, number of frames per step, and vertical scrolling offset. Scrolling offset may be from 0-63",1,null],[13,"EnableScroll","","Enable scrolling",1,null],[13,"VScrollArea","","Setup vertical scroll area. Values are number of rows above scroll area (0-63) and number of rows of scrolling. (0-64)",1,null],[13,"LowerColStart","","Set the lower nibble of the column start address register for Page addressing mode, using the lower 4 bits given. This is only for page addressing mode",1,null],[13,"UpperColStart","","Set the upper nibble of the column start address register for Page addressing mode, using the lower 4 bits given. This is only for page addressing mode",1,null],[13,"AddressMode","","Set addressing mode",1,null],[13,"ColumnAddress","","Setup column start and end address values range from 0-127 This is only for horizontal or vertical addressing mode",1,null],[13,"PageAddress","","Setup page start and end address This is only for horizontal or vertical addressing mode",1,null],[13,"PageStart","","Set GDDRAM page start address for Page addressing mode",1,null],[13,"StartLine","","Set display start line from 0-63",1,null],[13,"SegmentRemap","","Reverse columns from 127-0",1,null],[13,"Multiplex","","Set multipex ratio from 15-63 (MUX-1)",1,null],[13,"ReverseComDir","","Scan from COM[n-1] to COM0 (where N is mux ratio)",1,null],[13,"DisplayOffset","","Set vertical shift",1,null],[13,"ComPinConfig","","Setup com hardware configuration First value indicates sequential (false) or alternative (true) pin configuration. Second value disables (false) or enables (true) left/right remap.",1,null],[13,"DisplayClockDiv","","Set up display clock. First value is oscillator frequency, increasing with higher value Second value is divide ratio - 1",1,null],[13,"PreChargePeriod","","Set up phase 1 and 2 of precharge period. each value is from 0-63",1,null],[13,"VcomhDeselect","","Set Vcomh Deselect level",1,null],[13,"Noop","","NOOP",1,null],[13,"ChargePump","","Enable charge pump",1,null],[4,"HScrollDir","","Horizontal Scroll Direction",null,null],[13,"LeftToRight","","Left to right",2,null],[13,"RightToLeft","","Right to left",2,null],[4,"VHScrollDir","","Vertical and horizontal scroll dir",null,null],[13,"VerticalRight","","Vertical and right horizontal",3,null],[13,"VerticalLeft","","Vertical and left horizontal",3,null],[4,"Page","","Display page",null,null],[13,"Page0","","Page 0",4,null],[13,"Page1","","Page 1",4,null],[13,"Page2","","Page 2",4,null],[13,"Page3","","Page 3",4,null],[13,"Page4","","Page 4",4,null],[13,"Page5","","Page 5",4,null],[13,"Page6","","Page 6",4,null],[13,"Page7","","Page 7",4,null],[4,"NFrames","","Frame interval",null,null],[13,"F2","","2 Frames",5,null],[13,"F3","","3 Frames",5,null],[13,"F4","","4 Frames",5,null],[13,"F5","","5 Frames",5,null],[13,"F25","","25 Frames",5,null],[13,"F64","","64 Frames",5,null],[13,"F128","","128 Frames",5,null],[13,"F256","","256 Frames",5,null],[4,"AddrMode","","Address mode",null,null],[13,"Horizontal","","Horizontal mode",6,null],[13,"Vertical","","Vertical mode",6,null],[13,"Page","","Page mode (default)",6,null],[4,"VcomhLevel","","Vcomh Deselect level",null,null],[13,"V065","","0.65 * Vcc",7,null],[13,"V077","","0.77 * Vcc",7,null],[13,"V083","","0.83 * Vcc",7,null],[13,"Auto","","Auto",7,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","Send command to SSD1306",1,{"inputs":[{"name":"self"},{"name":"i2c"},{"name":"u8"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"hscrolldir"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"vhscrolldir"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"page"}}],[11,"from","","",4,{"inputs":[{"name":"u8"}],"output":{"name":"page"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"nframes"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"addrmode"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"vcomhlevel"}}],[17,"ADDRESS","ssd1306","Default i2c address",null,null],[11,"new","","Create Ssd1306 object",8,{"inputs":[{"name":"i2c"},{"name":"u8"},{"name":"rst"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ssd1306"}}],[11,"free","","Release resources",8,null],[11,"reset","","Reset display",8,{"inputs":[{"name":"self"},{"name":"delay"}],"output":{"name":"delay"}}],[11,"init","","Initialize display",8,{"inputs":[{"name":"self"},{"name":"delay"}],"output":{"name":"result"}}],[11,"clear","","Clear output buffer",8,{"inputs":[{"name":"self"}],"output":null}],[11,"pixel_on","","Turn pixel off",8,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"}],"output":null}],[11,"pixel_off","","Turn pixel on",8,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"}],"output":null}],[11,"invert_pixel","","Swap pixel value",8,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"}],"output":null}],[11,"draw","","Draw buffer to display",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[8,"Write"],[4,"Command"],[4,"HScrollDir"],[4,"VHScrollDir"],[4,"Page"],[4,"NFrames"],[4,"AddrMode"],[4,"VcomhLevel"],[3,"Ssd1306"]]};
initSearch(searchIndex);
